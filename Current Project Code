------------ MAIN CODE ------------

'''
@author: The Harbingers
Description: Battle for New York in the subway systems beneath the city as
 hideous creatures come out of the dark and try to kill you!
 Stemming from years of hazardous, toxic waste in the sewers, fight for
 you own survival along with humanity's as unrelenting waves of slime, thrall,
 and other abominations try to stop you from saving the world. As you fight
 through the underground, the streets, and eventually the sky, go up against
 stronger and tougher enemies, mutated foes, and all sorts of other terrifying
 things from the deep.
'''
import pygame
import sys, os, math
from pygame import *
from random import randint

WINDOWWIDTH = 1024
WINDOWHEIGHT = 768
GAMENAME = "Underground Battle NY"
FRAMERATE = 60
BGCOLOR = (255,255,255)
#RED = (255,0,0)
#GREEN = (0,255,0)
#BLUE = (0,0,255)
#BLACK = (0,0,0)
#WHITE = (255,255,255)
#These are for quick color access

class Game:
    ########## VARIABLES ##########
    score = 0
    levels = []
    topScores = []
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
    def main(self):
        playing = True
        pygame.init()
        clock = pygame.time.Clock()
        self.surface = pygame.display.set_mode((WINDOWWIDTH,WINDOWHEIGHT))
        pygame.display.set_caption(GAMENAME)
       
        ########## GAME LOOP ##########
        while playing:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    playing = False
                    #Allows the user to close the game by clicking the X
                #print(event)
                #Prints all current events to the console for debug purposes
            pygame.display.update()
            #Constantly updates the screen with new information
            clock.tick(FRAMERATE)
            #Sets the frame rate for the game which updates the screen
       
if __name__=='__main__':
    game = Game()
    game.main()
   
class Levels:
    ########## VARIABLES ##########
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
       
class Platforms:
    ########## VARIABLES ##########
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
   
class Interface:
    ########## VARIABLES ##########
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
   
class Buttons:
    ########## VARIABLES ##########
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
   
class Characters:
    ########## VARIABLES ##########
    dead = False
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
   
class Collectables:
    ########## VARIABLES ##########
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
   
class Hazards:
    ########## VARIABLES ##########
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########
   
class Destructables:
    ########## VARIABLES ##########
   
    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass
    ########## MAIN FUNCTION ##########

------------ UNFINISHED CHARACTER PLACEMENT CODE ------------

########## VARIABLES ##########
    x = (WINDOWWIDTH * 0.45)
    y = (WINDOWHEIGHT * 0.8)
    playerImage = pygame.image.load('player.png')
    #Tells the computer to load the image of the player and store it in ram

    ########## CONSTRUCTOR ##########
    def __init__(self):
        pass

    ########## MAIN FUNCTION ##########
    def playerSprite(x,y):
        self.surface.blit(playerImage,(x,y))
       
    playerSprite(x,y)
